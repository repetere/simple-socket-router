[
  {
    "kind": "index",
    "content": "# simple-socket-router [![Coverage Status](https://coveralls.io/repos/github/repetere/simple-socket-router/badge.svg?branch=master)](https://coveralls.io/github/repetere/simple-socket-router?branch=master) [![Build Status](https://travis-ci.org/repetere/simple-socket-router.svg?branch=master)](https://travis-ci.org/repetere/simple-socket-router)\nSimple express-like socket routing for websockets, event emitters and socket.io \n\nThis is a simple way to avoid having to write a bunch of `event.on` handlers for larger applications. You can simply define routes and pass in your event emitter/websocket/socket.io(client|sever) and handle routes that way\n\n## Example\n\nThis works for both socket servers and clients\n```javascript\n// SERVER CODE\nimport {Router,EventRouter} from 'simple-socket-router';\nimport Server from 'socket.io';\nconst ioServer = new Server();\n// Router - npm module 'routes';\nconst router = new Router();\nrouter.addRoute('/test/users', function(req, res){\n  console.log('Got data from client Handler');\n  res.send('ok');\n});\nrouter.addRoute('/account/:username', async (req, res)=>{\n  console.log('In Account Handler');\n  const user = await db.getUser(req.params.user);\n  res.send({user);\n});\n\nioServer.on('connection',socket=>{\n  EventRouter({router,socket});\n})\n```\n\n```javascript\n// Client CODE\nimport {Router,EventRouter} from 'simple-socket-router';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost');\n// Router - npm module 'routes';\nconst router = new Router();\nrouter.addRoute('/live/updates', function(req, res){\n  console.log('Got message from server',{update:req.body});\n});\n\nsocket.on('connect',()=>{\n  EventRouter({router,socket});\n})\n```\n",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/simple-socket-router/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# simple-socket-router [![Coverage Status](https://coveralls.io/repos/github/repetere/simple-socket-router/badge.svg?branch=master)](https://coveralls.io/github/repetere/simple-socket-router?branch=master) [![Build Status](https://travis-ci.org/repetere/simple-socket-router.svg?branch=master)](https://travis-ci.org/repetere/simple-socket-router)\nSimple express-like socket routing for websockets, event emitters and socket.io \n\nThis is a simple way to avoid having to write a bunch of `event.on` handlers for larger applications. You can simply define routes and pass in your event emitter/websocket/socket.io(client|sever) and handle routes that way\n\n## Example\n\nThis works for both socket servers and clients\n```javascript\n// SERVER CODE\nimport {Router,EventRouter} from 'simple-socket-router';\nimport Server from 'socket.io';\nconst ioServer = new Server();\n// Router - npm module 'routes';\nconst router = new Router();\nrouter.addRoute('/test/users', function(req, res){\n  console.log('Got data from client Handler');\n  res.send('ok');\n});\nrouter.addRoute('/account/:username', async (req, res)=>{\n  console.log('In Account Handler');\n  const user = await db.getUser(req.params.user);\n  res.send({user);\n});\n\nioServer.on('connection',socket=>{\n  EventRouter({router,socket});\n})\n```\n\n```javascript\n// Client CODE\nimport {Router,EventRouter} from 'simple-socket-router';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost');\n// Router - npm module 'routes';\nconst router = new Router();\nrouter.addRoute('/live/updates', function(req, res){\n  console.log('Got message from server',{update:req.body});\n});\n\nsocket.on('connect',()=>{\n  EventRouter({router,socket});\n})\n```\n",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/simple-socket-router/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/simple-socket-router/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/simple-socket-router/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "# Overview\r\n\r\nAll of the model building classes are structured similarly to ml.js models. Each model has three shared components regardless if it's a regression, classification or time series model.\r\n\r\nThis library was built to quickly implement [Tensorflow](https://js.tensorflow.org) and [Keras](https://js.tensorflow.org/tutorials/import-keras.html) models in JavaScript.\r\n\r\n## Configuration\r\n\r\nAll of the model configuration is managed during creating an instance of the class. All models have `fit` and `compile` properties that are assigned to the instance `settings` property.\r\n\r\nYou can also pass the Tensorflow reference to be used, as a configuration property if you want to use the compiled C++ or GPU via CUDA versions on the `tf` property;\r\n\r\n* `this.settings.compile` is passed to `tensorflow.model.compile` and contains the configuration for optimizers ([`read more`](https://js.tensorflow.org/api/latest/#tf.Model.compile)).\r\n* `this.settings.fit` is passed to `tensorflow.model.fit` and contains the configuration for model fitting ([`read more`](https://js.tensorflow.org/api/latest/#tf.Sequential.fit))\r\n\r\n### Model constructor example\r\n\r\n```javascript\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\nimport tf from '@tensorflow/tfjs-node-gpu';\r\n\r\nconst MLR = new MultipleLinearRegression({\r\n  fit:{\r\n    epochs:500,\r\n    batchSize:5,\r\n  },\r\n  compile:{\r\n    loss: 'meanSquaredError',\r\n    optimizer: 'adam',\r\n  },\r\n},{\r\n  tf,\r\n});\r\n```\r\n\r\nEach constructor takes two parameters `settings` and `properties`. As in the example above, *settings* are used to configure tensorflow objects and properties are used to configure tensorscript (like which version of tensorflow to use).\r\n\r\n## Training\r\n\r\nAll tensorflow models train asynchronously, therefore all tensorscript model train functions are all asynchronous. Always pass dependent and independent variables as matrix inputs.\r\n\r\nTime series models can be trained with only one input matrix.\r\n\r\n### Training example\r\n\r\n```javascript\r\n\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\n\r\nasync function main(){\r\n  const MLR = new MultipleLinearRegression();\r\n  const x = [ [1], [2] ];\r\n  const y = [ [3], [4] ];\r\n  await MLR.train(x,y);\r\n}\r\n```\r\n\r\n## Predicting\r\n\r\nAll prediction inputs must be the same shape as training inputs. TensorScript provides an asynchronous predict method that converts tensor values to javascript objects. If you want the tensor from tensorflow, use the calculate method instead.\r\n\r\n### Predicting example\r\n\r\n```javascript\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\n\r\nasync function main(){\r\n  const MLR = new MultipleLinearRegression();\r\n  const x = [ [1], [2] ];\r\n  const y = [ [3], [4] ];\r\n  await MLR.train(x,y);\r\n\r\n  await MLR.predict([[3]]) //=> [[5]];\r\n  const tensorPrediction = await MLR.calculate([[3]]) //=> [[5]];\r\n  tensorPrediction.data()\r\n    .then(tensors=> /*Typed Array*/)\r\n}\r\n```\r\n\r\n## Examples\r\n\r\nFor more examples on how to do feature scaling and more, check out the *[Examples folder](https://github.com/repetere/tensorscript/tree/master/manual/examples)*.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/simple-socket-router/manual/usage.md",
    "name": "./manual/usage.md",
    "content": "# Frequently Asked Questions\r\n\r\n## Scaling\r\n\r\n- **How do I scale and descale my inputs?**\r\n  - The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the regression examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).\r\n- **How do I cross validate, test/train split, K-fold, etc?**\r\n  - (See above) The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the code examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/simple-socket-router/manual/faq.md",
    "name": "./manual/faq.md",
    "content": "# Frequently Asked Questions\r\n\r\n## Scaling\r\n\r\n- **How do I scale and descale my inputs?**\r\n  - The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the regression examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).\r\n- **How do I cross validate, test/train split, K-fold, etc?**\r\n  - (See above) The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the code examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/simple-socket-router/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "# Changelog\n\n## 1.0.0 (2018-07-30)\n\n- **Feat**\n  - First Initial Release\n- **Fix**\n  - N/A\n- **Chore**\n  - Allow for multistep future forecasts in multivariate timeseries.\n  - Add basic clustering example.\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 0,
    "kind": "testFile",
    "name": "src/router.test.ts",
    "content": "import { Router, EventRouter, routerMiddleware,patchEmitter, } from './router';\r\nimport { expect, } from 'chai';\r\nimport { EventEmitter } from 'events';\r\nconst mockCallback = jest.fn(x => {\r\n  // console.log('jest func arguments', arguments);\r\n  return x;\r\n});\r\n\r\nconst router = new Router();\r\nrouter.addRoute(\"/articles/:title?\", mockCallback);\r\ndescribe('Simple Socket Router', () => {\r\n  describe('Router', () => {\r\n    it('should match routes', () => {\r\n      const articleRoute = router.match(\"/articles\");\r\n      expect(articleRoute.params.title).to.eql(undefined);\r\n      const articleRouteTitle = router.match(\"/articles/never-gonna-let-you-down\");\r\n      expect(articleRouteTitle.params.title).to.eql('never-gonna-let-you-down');\r\n      // console.log(router.match(\"/posts/show/1.json\"));\r\n    });\r\n  });\r\n  describe('EventRouter', () => {\r\n    describe('routerMiddleware',  () => {\r\n      it('should handle matched route callbacks', done => {\r\n        try {\r\n          const pathname = \"/posts/show/1.json\";\r\n          const actionCallback = jest.fn((req, res, match) => {\r\n            res.send(true);\r\n          });\r\n          router.addRoute(\"/:controller/:action/:id.:format?\", actionCallback);\r\n    \r\n          const socket = new EventEmitter();\r\n          socket.on(pathname, (data) => {\r\n            expect(data).to.be.ok;\r\n            done();\r\n          });\r\n          const handler = routerMiddleware({ socket, router });\r\n          const packet = [pathname, { author: 'bob', profile: 'n/a' }];\r\n          const next = jest.fn(x => x);\r\n          handler(packet, next);\r\n          expect(actionCallback.mock.calls.length).to.eql(1);\r\n          expect(next.mock.calls.length).to.eql(1);\r\n         \r\n        } catch (e) {\r\n          done(e);\r\n        }\r\n      });\r\n    });\r\n    describe('patchEmitter',  () => {\r\n      it('should handle matched route callbacks', done => {\r\n        try {\r\n          const pathname = \"/data/packet/20.json\";\r\n          const actionCallback = jest.fn((req, res, match) => {\r\n            res.send(true);\r\n          });\r\n          router.addRoute(\"/data/:call/:id.:format?\", actionCallback);\r\n    \r\n          const socket = new EventEmitter();\r\n          socket.on(pathname, (data) => {\r\n            expect(data).to.be.ok;\r\n            done();\r\n          });\r\n          const handler = routerMiddleware({ socket, router });\r\n          const packet = {\r\n            data: [pathname, { author: 'bob', profile: 'n/a' }],\r\n          };\r\n          patchEmitter(socket, handler);\r\n          socket.onevent(packet);\r\n         \r\n        } catch (e) {\r\n          done(e);\r\n        }\r\n      });\r\n    });\r\n    describe('EventRouter',  () => {\r\n      it('should handle matched route callbacks', done => {\r\n        try {\r\n          const socket = new EventEmitter();\r\n          EventRouter({ socket, router });\r\n          expect(socket.onevent).to.be.a('function');\r\n          done();\r\n         \r\n        } catch (e) {\r\n          done(e);\r\n        }\r\n      });\r\n    });\r\n  });\r\n})",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/simple-socket-router/src/router.test.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "src/router.test.ts",
    "testDepth": 0,
    "static": true,
    "longname": "src/router.test.ts~describe0",
    "access": null,
    "description": "Simple Socket Router",
    "lineNumber": 11
  },
  {
    "__docId__": 2,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "src/router.test.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "src/router.test.ts~describe0.describe1",
    "access": null,
    "description": "Router",
    "lineNumber": 12
  },
  {
    "__docId__": 3,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "src/router.test.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/router.test.ts~describe0.describe1.it2",
    "access": null,
    "description": "should match routes",
    "lineNumber": 13
  },
  {
    "__docId__": 4,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "src/router.test.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "src/router.test.ts~describe0.describe3",
    "access": null,
    "description": "EventRouter",
    "lineNumber": 21
  },
  {
    "__docId__": 5,
    "kind": "test",
    "name": "describe4",
    "testId": 4,
    "memberof": "src/router.test.ts~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "src/router.test.ts~describe0.describe3.describe4",
    "access": null,
    "description": "routerMiddleware",
    "lineNumber": 22
  },
  {
    "__docId__": 6,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "src/router.test.ts~describe0.describe3.describe4",
    "testDepth": 3,
    "static": true,
    "longname": "src/router.test.ts~describe0.describe3.describe4.it5",
    "access": null,
    "description": "should handle matched route callbacks",
    "lineNumber": 23
  },
  {
    "__docId__": 7,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "src/router.test.ts~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "src/router.test.ts~describe0.describe3.describe6",
    "access": null,
    "description": "patchEmitter",
    "lineNumber": 48
  },
  {
    "__docId__": 8,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "src/router.test.ts~describe0.describe3.describe6",
    "testDepth": 3,
    "static": true,
    "longname": "src/router.test.ts~describe0.describe3.describe6.it7",
    "access": null,
    "description": "should handle matched route callbacks",
    "lineNumber": 49
  },
  {
    "__docId__": 9,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "src/router.test.ts~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "src/router.test.ts~describe0.describe3.describe8",
    "access": null,
    "description": "EventRouter",
    "lineNumber": 74
  },
  {
    "__docId__": 10,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "src/router.test.ts~describe0.describe3.describe8",
    "testDepth": 3,
    "static": true,
    "longname": "src/router.test.ts~describe0.describe3.describe8.it9",
    "access": null,
    "description": "should handle matched route callbacks",
    "lineNumber": 75
  }
]